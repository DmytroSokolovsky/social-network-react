{"version":3,"file":"static/js/66.877bf05f.chunk.js","mappings":"8JACA,SAAgB,KAAO,mBAAmB,KAAO,mBAAmB,WAAa,yBAAyB,eAAiB,6BAA6B,WAAa,yBAAyB,cAAgB,4BAA4B,KAAO,mBAAmB,gBAAkB,8BAA8B,eAAiB,6BAA6B,kBAAoB,gCAAgC,aAAe,2BAA2B,eAAiB,6BAA6B,WAAa,yBAAyB,SAAW,uBAAuB,MAAQ,qB,sBCCvjB,MAAMA,EAAeC,GAAqBA,EAAMC,KAAKC,SAE/CC,EAAiBH,GAAqBA,EAAMC,KAAKG,W,kECKvD,MAAMC,EAAUC,EAAAA,KACrBA,EAAAA,YACE,CAAAC,EAAuCC,KAAS,IAA/C,QAAEC,EAAO,MAAEC,EAAK,OAAEC,EAAM,SAAEC,GAAUL,EACnC,MAAMM,GAAKC,EAAAA,EAAAA,GAAeC,EAAAA,IAEpBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAcP,IAAWE,EAEzBM,EAAeR,IACnBK,EAAS,YAADI,OAAaT,GAAU,CAAEU,SAAS,GAAO,EAGnD,IAAIC,EAAeC,IAAGC,EAAEC,cAAe,CACrC,CAACD,EAAEE,MAAOR,IAGZ,OACES,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIX,IACAS,EAAAA,EAAAA,MAAA,OAAKG,UAAWR,EAAcd,IAAKA,EAAIqB,SAAA,EACrCE,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEQ,aAAaH,UAC7BE,EAAAA,EAAAA,KAAA,OACED,UAAWN,EAAES,gBACbC,QAASA,IAAMf,EAAYR,GAAQkB,SAElCnB,GACCqB,EAAAA,EAAAA,KAAA,OAAKI,IAAKzB,EAAO0B,IAAG,GAAAhB,OAAKR,EAAQ,gBAEjCmB,EAAAA,EAAAA,KAAA,OAAKI,IAAKE,EAAeD,IAAG,GAAAhB,OAAKR,EAAQ,oBAI/Ce,EAAAA,EAAAA,MAAA,OAAKG,UAAWN,EAAEQ,aAAaH,SAAA,EAC7BE,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEc,eAAeT,SAAEjB,KACnCmB,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEe,kBAAkBV,SAAEpB,UAI3CS,IACCS,EAAAA,EAAAA,MAAA,OAAKG,UAAWR,EAAcd,IAAKA,EAAIqB,SAAA,EACrCF,EAAAA,EAAAA,MAAA,OAAKG,UAAWN,EAAEQ,aAAaH,SAAA,EAC7BE,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEc,eAAeT,SAAEjB,KACnCmB,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEe,kBAAkBV,SAAEpB,QAExCsB,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEQ,aAAaH,UAC7BE,EAAAA,EAAAA,KAAA,OACED,UAAWN,EAAES,gBACbC,QAASA,IAAMf,EAAYR,GAAQkB,SAElCnB,GACCqB,EAAAA,EAAAA,KAAA,OAAKI,IAAKzB,EAAO0B,IAAG,GAAAhB,OAAKR,EAAQ,gBAEjCmB,EAAAA,EAAAA,KAAA,OAAKI,IAAKE,EAAeD,IAAG,GAAAhB,OAAKR,EAAQ,wBAMlD,KC7DE4B,EAAWA,KACtB,MAAMC,GAAS3B,EAAAA,EAAAA,GAAe4B,EAAAA,IACxBxC,GAAWY,EAAAA,EAAAA,GAAef,GAC1B4C,GAAmBC,EAAAA,EAAAA,QAAuB,OACzCC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,IAEjDC,EAAAA,EAAAA,YAAU,KACW,IAADC,EAAdJ,IACsB,QAAxBI,EAAAN,EAAiBO,eAAO,IAAAD,GAAxBA,EAA0BE,eAAe,CAAEC,SAAU,WACvD,GACC,CAAClD,EAAU2C,IAed,OACElB,EAAAA,EAAAA,MAAA,OAAKG,UAAWN,EAAE6B,eAAgBC,SAdbC,IACrB,MAAMC,EAAUD,EAAEE,cAEhBC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WACtCL,EAAQM,aACV,KAECjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,EAClC,EAI0DjB,SAAA,EACtDY,IACAV,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEuC,WAAWlC,SAAC,+CAI/BY,GACCvC,EAAS8D,KAAI,CAACvD,EAASwD,KACrBlC,EAAAA,EAAAA,KAAC1B,EAAO,IAEFI,EACJD,IAAKyD,IAAU/D,EAASgE,OAAS,EAAIvB,EAAmB,MAFnDsB,OAKP,E,YCvCH,MAAME,EAAaA,KACxB,MAAMC,GAAWC,EAAAA,EAAAA,MACV5D,EAAS6D,IAAcvB,EAAAA,EAAAA,UAAS,IAEjC3C,GAAaU,EAAAA,EAAAA,GAAeX,GAclC,IAAIoE,EAAYhD,IAAGC,EAAEgD,WAAY,CAC/B,CAAChD,EAAEiD,UAA0B,UAAfrE,IAGhB,OACEuB,EAAAA,EAAAA,MAAA,OAAKG,UAAWN,EAAEkD,aAAa7C,SAAA,EAC7BE,EAAAA,EAAAA,KAAA,OAAKD,UAAWN,EAAEmD,eAAe9C,UAC/BE,EAAAA,EAAAA,KAAA,YACED,UAAU,WACV8C,YAAY,wBACZC,SAdqBtB,IAC3Be,EAAWf,EAAEuB,OAAOC,MAAM,EAcpBA,MAAOtE,OAGXsB,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CACPP,SAAyB,UAAfrE,EACV6E,KAAK,SACL/C,QA7BoBgD,KACnBzE,IAGL2D,GAASe,EAAAA,EAAAA,IAAY1E,IACrB6D,EAAW,IAAG,EAyBVxC,UAAWyC,EAAU1C,SACtB,WAGG,E,aCmHV,MAmCA,EAnCauD,KACX,MAAMC,GAAQC,EAAAA,EAAAA,YAAWC,EAAAA,GAEnBnB,GAAWC,EAAAA,EAAAA,KACXjE,GAAaU,EAAAA,EAAAA,GAAeX,IAElC6C,EAAAA,EAAAA,YAAU,KACRoB,GAASoB,EAAAA,EAAAA,OAEF,KACLpB,GAASqB,EAAAA,EAAAA,OACTrB,GAASsB,EAAAA,EAAAA,MAAgB,IAE1B,CAACtB,IAEJ,IAAIuB,EAAYpE,IAAGC,EAAEvB,KAAM,CACzB,CAACuB,EAAEoE,OAAkB,UAAVP,EACX,CAAC7D,EAAEqE,MAAiB,SAAVR,IAGZ,OACE1D,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACkB,UAAfzB,IACC2B,EAAAA,EAAAA,KAAC+D,EAAAA,EAAK,CAACC,aAAc,kDAEvBhE,EAAAA,EAAAA,KAAA,OAAKD,UAAW6D,EAAU9D,UACxBF,EAAAA,EAAAA,MAAA,OAAKG,UAAWN,EAAEwE,WAAWnE,SAAA,EAC3BE,EAAAA,EAAAA,KAACS,EAAQ,KACTT,EAAAA,EAAAA,KAACoC,EAAU,WAGd,C","sources":["webpack://social-network-app/./src/components/Chat/Chat.module.scss?3294","redux/selectors/chat-selector.ts","components/Chat/Messages/Message/Message.tsx","components/Chat/Messages/Messages.tsx","components/Chat/AddMessage/AddMessage.tsx","components/Chat/Chat.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__5Eo3A\",\"dark\":\"Chat_dark__njcHV\",\"chat__body\":\"Chat_chat__body__SHuX6\",\"chat__messages\":\"Chat_chat__messages__7b7rV\",\"chat__warn\":\"Chat_chat__warn__GwLXO\",\"chat__message\":\"Chat_chat__message__nH8fo\",\"user\":\"Chat_user__7zjHR\",\"chat__userPhoto\":\"Chat_chat__userPhoto__s4B3z\",\"chat__userName\":\"Chat_chat__userName__YpgzR\",\"chat__textMessage\":\"Chat_chat__textMessage__Uo-UU\",\"chat__bottom\":\"Chat_chat__bottom__8KP4y\",\"chat__textarea\":\"Chat_chat__textarea__4f2B-\",\"chat__send\":\"Chat_chat__send__4+7WY\",\"disabled\":\"Chat_disabled__4toPX\",\"light\":\"Chat_light__yDseb\"};","import { RootState } from '../store';\r\n\r\nexport const getMessages = (state: RootState) => state.chat.messages;\r\n\r\nexport const getChatStatus = (state: RootState) => state.chat.chatStatus;\r\n","import React from 'react';\r\nimport { ChatMessageDataType } from '../../../../api/chat-api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport profileAvatar from '../../../../images/profile__avatar.png';\r\nimport s from '../../Chat.module.scss';\r\nimport { useAppSelector } from '../../../../hooks/hooks';\r\nimport { getId } from '../../../../redux/selectors/auth-selector';\r\nimport cn from 'classnames';\r\n\r\nexport const Message = React.memo(\r\n  React.forwardRef<HTMLDivElement, ChatMessageDataType>(\r\n    ({ message, photo, userId, userName }, ref) => {\r\n      const id = useAppSelector(getId);\r\n\r\n      const navigate = useNavigate();\r\n\r\n      const userProfile = userId === id;\r\n\r\n      const handleClick = (userId: number) => {\r\n        navigate(`/profile/${userId}`, { replace: true });\r\n      };\r\n\r\n      let messageClass = cn(s.chat__message, {\r\n        [s.user]: userProfile,\r\n      });\r\n\r\n      return (\r\n        <>\r\n          {!userProfile && (\r\n            <div className={messageClass} ref={ref}>\r\n              <div className={s.chat__column}>\r\n                <div\r\n                  className={s.chat__userPhoto}\r\n                  onClick={() => handleClick(userId)}\r\n                >\r\n                  {photo ? (\r\n                    <img src={photo} alt={`${userName}'s avatar`} />\r\n                  ) : (\r\n                    <img src={profileAvatar} alt={`${userName}'s avatar`} />\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className={s.chat__column}>\r\n                <div className={s.chat__userName}>{userName}</div>\r\n                <div className={s.chat__textMessage}>{message}</div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {userProfile && (\r\n            <div className={messageClass} ref={ref}>\r\n              <div className={s.chat__column}>\r\n                <div className={s.chat__userName}>{userName}</div>\r\n                <div className={s.chat__textMessage}>{message}</div>\r\n              </div>\r\n              <div className={s.chat__column}>\r\n                <div\r\n                  className={s.chat__userPhoto}\r\n                  onClick={() => handleClick(userId)}\r\n                >\r\n                  {photo ? (\r\n                    <img src={photo} alt={`${userName}'s avatar`} />\r\n                  ) : (\r\n                    <img src={profileAvatar} alt={`${userName}'s avatar`} />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      );\r\n    },\r\n  ),\r\n);\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport { useAppSelector } from '../../../hooks/hooks';\r\nimport { getMessages } from '../../../redux/selectors/chat-selector';\r\nimport { Message } from './Message/Message';\r\nimport s from '../Chat.module.scss';\r\nimport { getIsAuth } from '../../../redux/selectors/auth-selector';\r\n\r\nexport const Messages = () => {\r\n  const isAuth = useAppSelector(getIsAuth);\r\n  const messages = useAppSelector(getMessages);\r\n  const messageAnchorRef = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messageAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages, isAutoScroll]);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (\r\n      Math.abs(element.scrollHeight - element.scrollTop) -\r\n        element.clientHeight <\r\n      300\r\n    ) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.chat__messages} onScroll={scrollHandler}>\r\n      {!isAuth && (\r\n        <div className={s.chat__warn}>\r\n          To have access to chat you chould sign in!\r\n        </div>\r\n      )}\r\n      {isAuth &&\r\n        messages.map((message, index) => (\r\n          <Message\r\n            key={index}\r\n            {...message}\r\n            ref={index === messages.length - 1 ? messageAnchorRef : null}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\r\nimport { getChatStatus } from '../../../redux/selectors/chat-selector';\r\nimport { sendMessage } from '../../../redux/chat-reducer';\r\nimport cn from 'classnames';\r\nimport s from '../Chat.module.scss';\r\nimport { MyButton } from '../../common/MyButton/MyButton';\r\n\r\nexport const AddMessage = () => {\r\n  const dispatch = useAppDispatch();\r\n  const [message, setMessage] = useState('');\r\n\r\n  const chatStatus = useAppSelector(getChatStatus);\r\n\r\n  const handleSendMessage = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessage(message));\r\n    setMessage('');\r\n  };\r\n\r\n  const handleChangeMessage = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessage(e.target.value);\r\n  };\r\n\r\n  let sendClass = cn(s.chat__send, {\r\n    [s.disabled]: chatStatus !== 'ready',\r\n  });\r\n\r\n  return (\r\n    <div className={s.chat__bottom}>\r\n      <div className={s.chat__textarea}>\r\n        <textarea\r\n          className=\"textarea\"\r\n          placeholder=\"Enter your message...\"\r\n          onChange={handleChangeMessage}\r\n          value={message}\r\n        ></textarea>\r\n      </div>\r\n      <MyButton\r\n        disabled={chatStatus !== 'ready'}\r\n        type=\"submit\"\r\n        onClick={handleSendMessage}\r\n        className={sendClass}\r\n      >\r\n        Send\r\n      </MyButton>\r\n    </div>\r\n  );\r\n};\r\n","import { useContext, useEffect } from 'react';\r\nimport s from './Chat.module.scss';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport {\r\n  resetMessages,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from '../../redux/chat-reducer';\r\nimport { getChatStatus } from '../../redux/selectors/chat-selector';\r\nimport { Toast } from '../common/Toast/Toast';\r\nimport { Messages } from './Messages/Messages';\r\nimport { AddMessage } from './AddMessage/AddMessage';\r\nimport cn from 'classnames';\r\nimport { ThemeContext } from '../../context/context';\r\n\r\n// const Message = ({ message, photo, userId, userName }: ChatMessageDataType) => {\r\n//   return (\r\n//     <div className={s.chat__message}>\r\n//       <div className={s.chat__column}>\r\n//         <div className={s.chat__userPhoto}>\r\n//           {photo ? (\r\n//             <img src={photo} alt={`${userName}'s avatar`} />\r\n//           ) : (\r\n//             <img src={profileAvatar} alt={`${userName}'s avatar`} />\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//       <div className={s.chat__column}>\r\n//         <div className={s.chat__userName}>{userName}</div>\r\n//         <div className={s.chat__textMessage}>{message}</div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// interface AddMessagePropsType {\r\n//   wsChannel: WebSocket | null;\r\n// }\r\n\r\n// const AddMessage = ({ wsChannel }: AddMessagePropsType) => {\r\n//   const [message, setMessage] = useState('');\r\n//   const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>(\r\n//     'pending',\r\n//   );\r\n\r\n//   useEffect(() => {\r\n//     let openHandler = () => {\r\n//       setReadyStatus('ready');\r\n//     };\r\n\r\n//     wsChannel?.addEventListener('open', openHandler);\r\n\r\n//     return () => {\r\n//       wsChannel?.removeEventListener('open', openHandler);\r\n//     };\r\n//   }, [wsChannel]);\r\n\r\n//   const handleSendMessage = () => {\r\n//     if (!message) {\r\n//       return;\r\n//     }\r\n//     wsChannel?.send(message);\r\n//     setMessage('');\r\n//   };\r\n\r\n//   const handleChangeMessage = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n//     setMessage(e.target.value);\r\n//   };\r\n\r\n//   return (\r\n//     <div className={s.chat__bottom}>\r\n//       <div className={s.chat__textarea}>\r\n//         <textarea\r\n//           className=\"textarea\"\r\n//           placeholder=\"Enter your message...\"\r\n//           onChange={handleChangeMessage}\r\n//           value={message}\r\n//         ></textarea>\r\n//       </div>\r\n//       <div className={s.chat__send}>\r\n//         <button\r\n//           disabled={wsChannel === null || readyStatus !== 'ready'}\r\n//           onClick={handleSendMessage}\r\n//           type=\"submit\"\r\n//         >\r\n//           Send\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// interface MessagesPropsType {\r\n//   wsChannel: WebSocket | null;\r\n// }\r\n\r\n// const Messages = ({ wsChannel }: MessagesPropsType) => {\r\n//   const [messages, setMessages] = useState<Array<ChatMessageDataType>>([]);\r\n\r\n//   useEffect(() => {\r\n//     const messageHandler = (e: MessageEvent) => {\r\n//       let newMessages = JSON.parse(e.data);\r\n//       setMessages(prevMessages => [...prevMessages, ...newMessages]);\r\n//     };\r\n\r\n//     wsChannel?.addEventListener('message', messageHandler);\r\n\r\n//     return () => {\r\n//       wsChannel?.removeEventListener('message', messageHandler);\r\n//     };\r\n//   }, [wsChannel]);\r\n\r\n//   return (\r\n//     <div className={s.chat__messages}>\r\n//       {messages.map((message, index) => (\r\n//         <Message key={index} {...message} />\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Chat = () => {\r\n//   const [wsChannel, setWsChannel] = useState<WebSocket | null>(null);\r\n\r\n//   useEffect(() => {\r\n//     let ws: WebSocket;\r\n\r\n//     const closeHandler = () => {\r\n//       console.log('CLOSE WS');\r\n//       setTimeout(createChannel, 3000);\r\n//     };\r\n\r\n//     function createChannel() {\r\n//       ws?.removeEventListener('close', closeHandler);\r\n//       ws?.close();\r\n\r\n//       ws = new WebSocket(\r\n//         'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx',\r\n//       );\r\n//       ws?.addEventListener('close', closeHandler);\r\n//       setWsChannel(ws);\r\n//     }\r\n\r\n//     createChannel();\r\n\r\n//     return () => {\r\n//       ws.removeEventListener('close', closeHandler);\r\n//       ws.close();\r\n//     };\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className={s.chat}>\r\n//       <div className={s.chat__body}>\r\n//         <Messages wsChannel={wsChannel} />\r\n//         <AddMessage wsChannel={wsChannel} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chat;\r\n\r\nconst Chat = () => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const chatStatus = useAppSelector(getChatStatus);\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n      dispatch(resetMessages());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  let chatClass = cn(s.chat, {\r\n    [s.light]: theme === 'light',\r\n    [s.dark]: theme === 'dark',\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {chatStatus === 'error' && (\r\n        <Toast errorMessage={'Some error occured. Please, refresh the page'} />\r\n      )}\r\n      <div className={chatClass}>\r\n        <div className={s.chat__body}>\r\n          <Messages />\r\n          <AddMessage />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["getMessages","state","chat","messages","getChatStatus","chatStatus","Message","React","_ref","ref","message","photo","userId","userName","id","useAppSelector","getId","navigate","useNavigate","userProfile","handleClick","concat","replace","messageClass","cn","s","chat__message","user","_jsxs","_Fragment","children","className","_jsx","chat__column","chat__userPhoto","onClick","src","alt","profileAvatar","chat__userName","chat__textMessage","Messages","isAuth","getIsAuth","messageAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useState","useEffect","_messageAnchorRef$cur","current","scrollIntoView","behavior","chat__messages","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","chat__warn","map","index","length","AddMessage","dispatch","useAppDispatch","setMessage","sendClass","chat__send","disabled","chat__bottom","chat__textarea","placeholder","onChange","target","value","MyButton","type","handleSendMessage","sendMessage","Chat","theme","useContext","ThemeContext","startMessagesListening","stopMessagesListening","resetMessages","chatClass","light","dark","Toast","errorMessage","chat__body"],"sourceRoot":""}